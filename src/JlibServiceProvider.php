<?php
/**
 * Created by PhpStorm.
 * User: joe
 * Date: 13/12/17
 * Time: 12:43 ุต
 */

namespace Jlib;


use Illuminate\Support\ServiceProvider;
use Jlib\JModules\AdminAuth\AdminAuthLoader;


class JlibServiceProvider extends ServiceProvider
{

    public function boot()
    {



        /*
         * load Config file and use it
         * it return an array of configs
         * don`t edit if you den`t understand it
         */
        $configs = \JConfig();

        /*
         * load admin auth module init point class
         * it responsible  of load views, routes , controller
         * for admin login and it use config file to load some cnfgis
         */
        AdminAuthLoader::init($this, $configs);

        $this->jlibLoadViews(__DIR__ . ".UI.CommonViews", "Jlib");
        $this->publishes([
            __DIR__ . DIRECTORY_SEPARATOR . "UI" . DIRECTORY_SEPARATOR . 'Assets' => public_path('vendor/Jlip'),
        ], 'Jlib');
    }

    public function jlibLoadViews($path, $namespace)
    {
        parent::loadViewsFrom(implode(DIRECTORY_SEPARATOR, explode(".", $path)), $namespace); // TODO: Change the autogenerated stub
    }


}


//
//
//private function loadPlugins()
//{
//    $dirs = (File::directories(self::PluginsPath()));
//
//    foreach ($dirs as $dir) {
//        $jsonOptions = self::loadBootJsonFile($dir);
//        if (@$jsonOptions->active) {
//            self::getBootFileForPlugin($dir)::init($jsonOptions);
//        }
//    }
//}
//
//private static function getBootFileForPlugin($dir)
//{
//    $parts = explode("/", $dir);
//    $PluginDir = end($parts);
//    return "Plugins\\$PluginDir\BootFile";
//}
//
//private static function loadBootJsonFile($dir)
//{
//
//    if (File::exists($file = $dir . "/boot.json"))
//        return json_decode(File::get($file));
//
//
//}
//
//private function loadRoutesViewsAndMigrations()
//{
//    $scopes = File::directories(self::ModulePath());
//    foreach ($scopes as $scope) {
//        $dirs = File::directories($scope);
//        if ($this->loadMainRouteForScope($scope)) {
//            foreach ($dirs as $dir) {
//                $this->loadViews($dir . "/Views", $scope, $dir);
//                $this->loadMigrations($dir . "/Migrations");
//                $this->loadRoutes($dir . "/Routes");
//            }
//        }
//    }
//}
//
//private function loadMainRouteForScope($scope)
//{
//
//    if (File::exists($file = $scope . "/route.php")) {
//        $this->loadRoutesFrom($file);
//        return true;
//    }
//    return false;
//}
//
//private static function getViewNameSpace($scope, $dir)
//{
//
//    $scopeParts = explode("/", $scope);
//    $dirParts = explode("/", $dir);
////        dump($dirParts);
//    return strtolower(end($scopeParts) . "_" . end($dirParts));
//}
//
//public function loadViews($routDirectory, $scope, $dir)
//{
//
//    if (File::exists($routDirectory)) {
//
//        foreach (File::files($dir) as $oneFile) {
//            if (strpos($oneFile->getFilename(), 'Controller.php') !== false) {
//                $dirOfViews = Str::slug(Str::snake(Str::replaceFirst('Controller.php', "", $oneFile->getFilename())));
////                    dump(($routDirectory . "/$dirOfViews"), self::getViewNameSpace($scope, $dirOfViews));
//                $this->loadViewsFrom(($routDirectory . "/$dirOfViews"), self::getViewNameSpace($scope, $dirOfViews));
//            }
//        }
//    }
//
//
//}
//
//
//public function loadMigrations($routDirectory)
//{
//
//    if (File::exists($routDirectory)) {
//        $this->loadMigrationsFrom($routDirectory);
//    }
//
//
//}
//
//
//private function loadRoutes($routDirectory)
//{
//
//
//    if (File::exists($routDirectory)) {
//        $files = File::files($routDirectory);
//        foreach ($files as $file) {
//            $this->loadRoutesFrom($file->getPathname());
//        }
//    }
//
//
//}
//
//public static function ModulePath($path = null)
//{
//    return base_path(self::$ModuleDir . (($path) ? "/" . $path : null));
//}
//
//public static function PluginsPath($path = null)
//{
//    return base_path(self::$plugins . (($path) ? "/" . $path : null));
//}
